public static const uint32_t LIGHT_MATERIAL = 2u;
public static const uint32_t WHITE_TEXTURE = 0u;
public static const uint32_t BLACK_TEXTURE = 1u;

public struct Globals
{
    public float2 resolution;
    public float time;
    public uint frame;
}

public struct Camera
{
    public float4 position;
    public float4x4 proj;
    public float4x4 view;
    public float4x4 inv_proj;
}

public struct Light
{
    public float3 position;
    public float radius;
    public float3 color;
}

public struct AreaLight
{
    public float3 color;
    public float intensity;
    public float3 points[4];
};

public struct BoundingSphere
{
    public float3 center;
    public float radius;
};

public struct MeshInfo
{
    public uint vertex_offset;
    public uint vertex_count;
    public uint base_index;
    public uint index_count;
};

public struct Instance
{
    public column_major float4x4 transform;
    public uint mesh_id;
    public uint material_id;
};

public struct Material
{
    public float4 base_color;
    public uint albedo;
    public uint normal;
    public uint metallic_roughness;
    public uint emissive;
};
#ifdef DRAW_INDIRECT

#if defined(TARGET_SPIRV) || defined(TARGET_MSL)

#define DECLARE_DRAW_PARAMETERS                                                                 \
    uint VERTEX_ID_OFFSET : SV_VertexID,                                                        \
                            uint INSTANCE_ID_OFFSET : SV_InstanceID,                            \
                                                      int BASE_VERTEX : SV_StartVertexLocation, \
                                                                        uint BASE_INSTANCE : SV_StartInstanceLocation

#define VERTEX_ID (VERTEX_ID_OFFSET - BASE_VERTEX)
#define INSTANCE_ID (INSTANCE_ID_OFFSET - BASE_INSTANCE)

#elif defined(TARGET_DXIL)

ConstantBuffer<BaseAttributeConstants> BaseAttributes : register(b0, space999);
public struct BaseAttributeConstants
{
    public int base_vertex;
    public uint base_instance;
};

#define DECLARE_DRAW_PARAMETERS          \
    uint VERTEX_ID_OFFSET : SV_VertexID, \
                            uint INSTANCE_ID_OFFSET : SV_InstanceID
#define BASE_VERTEX BaseAttributes.base_vertex
#define BASE_INSTANCE BaseAttributes.base_instance
#define VERTEX_ID (VERTEX_ID_OFFSET + BaseAttributes.base_vertex)
#define INSTANCE_ID (INSTANCE_ID_OFFSET + BaseAttributes.base_instance)

#else

#define DECLARE_DRAW_PARAMETERS
#define VERTEX_ID_OFFSET 0
#define INSTANCE_ID_OFFSET 0
#define BASE_VERTEX 0
#define BASE_INSTANCE 0
#define VERTEX_ID 0
#define INSTANCE_ID 0

#endif

#endif

[ForceInline]
void set_indexed_indirect_arr<T : IRWArray<uint>>(T arr, uint index, uint index_count_per_instance, uint instance_count, uint base_index, int vertex_offset, uint base_instance)
{
    __target_switch
    {
    case hlsl:
    case dxil_lib:
        arr[index * 7 + 0] = vertex_offset;
        arr[index * 7 + 1] = base_instance;
        arr[index * 7 + 2] = index_count_per_instance;
        arr[index * 7 + 3] = instance_count;
        arr[index * 7 + 4] = base_index;
        arr[index * 7 + 5] = vertex_offset;
        arr[index * 7 + 6] = base_instance;

    default:
        arr[index * 5 + 0] = index_count_per_instance;
        arr[index * 5 + 1] = instance_count;
        arr[index * 5 + 2] = base_index;
        arr[index * 5 + 3] = vertex_offset;
        arr[index * 5 + 4] = base_instance;
    }
}
